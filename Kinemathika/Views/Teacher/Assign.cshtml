@* WHAT IT DOES: Step 2 page — pick students (search + check all) and submit *@
@model Kinemathika.ViewModels.Teacher.CreateClassStep2Vm
@{
    ViewData["IsAuthPage"] = true;
    ViewData["Title"] = "Create Class - Step 2";
    ViewData["Step"] = 2;
}
<div class="container-xl min-vh-100 d-flex align-items-center">
    <div class="w-100">
        @await Html.PartialAsync("~/Views/Shared/_StepProgress.cshtml")

        <div class="text-center mb-4 teacher-step">
            @* shared typographic wrapper *@
            <h3 class="mb-1">Let’s assign your students!</h3>
            <p class="mb-0">Choose students or upload a class list—we’ll handle the rest.</p>
            <small class="text-muted">Already have student records? Upload a file <a href="#" class="link-success">here</a>.</small>
        </div>

        <form asp-action="Assign" method="post">
            @Html.AntiForgeryToken()
            <input type="hidden" asp-for="ClassName" />

            <div class="d-flex justify-content-between align-items-center gap-2 flex-wrap mb-2">
                <div class="fw-semibold">Class: @Model.ClassName</div>
                <div class="input-group" style="max-width: 280px;">
                    <span class="input-group-text"><i class="bi bi-search"></i></span>
                    <input asp-for="Search" class="form-control" id="searchBox" placeholder="Search here" autocomplete="off">
                </div>
            </div>

            <div class="table-responsive rounded-3 shadow-sm">
                <table class="table align-middle mb-0">
                    <thead class="table-success">
                        <tr>
                            <th style="width:48px;">
                                <input class="form-check-input" type="checkbox" id="checkAll">
                            </th>
                            <th>Student ID</th>
                            <th>Student Name</th>
                            <th>Email Address</th>
                        </tr>
                    </thead>
                    <tbody id="studentRows">
                        @for (var i = 0; i < Model.Students.Count; i++)
                        {
                            <tr>
                                <td>
                                    <input class="form-check-input row-check" type="checkbox" name="SelectedIds" value="@Model.Students[i].Id">
                                </td>
                                <td class="sid">@Model.Students[i].StudentId</td>
                                <td class="sname">@Model.Students[i].Name</td>
                                <td class="semail">@Model.Students[i].Email</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="d-flex justify-content-end gap-2 mt-3">
                <button class="btn btn-outline-secondary" type="submit" name="action" value="later">Do it later</button>
                <button class="btn btn-success px-4" type="submit" name="action" value="done">Done</button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        // WHAT IT DOES: simple client-side search + select-all
        (function () {
          const q = document.getElementById('searchBox');
          const rows = document.querySelectorAll('#studentRows tr');
          q?.addEventListener('input', function () {
            const term = this.value.toLowerCase();
            rows.forEach(r => r.style.display = r.innerText.toLowerCase().includes(term) ? '' : 'none');
          });
          const all = document.getElementById('checkAll');
          const boxes = document.querySelectorAll('.row-check');
          all?.addEventListener('change', () => boxes.forEach(b => b.checked = all.checked));
        })();
    </script>
}
