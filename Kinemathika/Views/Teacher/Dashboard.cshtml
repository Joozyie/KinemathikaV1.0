@* Teacher Dashboard: All Class Overview using RDashboardOverviewVm and Chart.js *@
@model TeacherOverviewVm

@{
    ViewData["IsAuthPage"] = true;
    ViewData["Title"] = "Dashboard";
    Layout = "~/Views/Shared/_TeacherLayout.cshtml";
        var pageTitle = string.IsNullOrEmpty(Model.ClassName)
        ? "All Class Overview"
        : $"{Model.ClassName} Overview";

    Func<string, string> MapConceptName = id => id switch
    {
        "all" => "All Concepts",
        "sv" => "Speed and Velocity",
        "dd" => "Distance and Displacement",
        "acc" => "Acceleration",
        _ => id
    };
}

@section PageTitle {
    <div class="fw-bold mb-3">@pageTitle</div>
}

<!-- ==================== TOP KPI ROW ==================== -->
<div class="row g-3 mb-3">
    @if (string.IsNullOrEmpty(Model.ClassName))
    {
        <div class="col">
            <div class="kpi-tile kpi-blue">
                <div class="kpi-label">Total Classes</div>
                <div class="kpi-value">@Model.Dashboard.TotalClasses</div>
            </div>
        </div>
    }
    <div class="col">
        <div class="kpi-tile kpi-blue">
            <div class="kpi-label">Total Students</div>
            <div class="kpi-value">@Model.Dashboard.TotalStudents</div>
        </div>
    </div>
    <div class="col">
        <div class="kpi-tile kpi-orange">
            <div class="kpi-label">Avg Attempts per Problem</div>
            <div class="kpi-value">@Model.Dashboard.AvgAttemptsPerProblem.ToString("0.00")</div>
        </div>
    </div>
    <div class="col">
        <div class="kpi-tile kpi-green">
            <div class="kpi-label">Avg Time per Problem</div>
            <div class="kpi-value">
                @{
                    var secs = Model.Dashboard.AvgTimePerProblem;
                    var t = TimeSpan.FromSeconds(secs);
                }
                @($"{(int)t.TotalMinutes} min {t.Seconds} sec")
            </div>
        </div>
    </div>
</div>

<!-- ==================== PROGRESS + CONCEPT INSIGHTS CARD ==================== -->
<div class="card border-0 shadow-sm rounded-4 mb-3">
    <div class="card-body">
        <!-- Card Title -->
        <div class="fw-bold fs-5 mb-3">Concept Insights</div>

        <div class="row g-4">
            <!-- Left Column: Donut Chart -->
            <div class="col-12 col-xl-5 text-center d-flex flex-column align-items-center">
                <div class="position-relative" style="width: 100%; max-width: 260px; aspect-ratio: 1;">
                    <canvas id="progressDonut"></canvas>
                    <div id="donutCenterText" 
                        class="position-absolute top-50 start-50 translate-middle fw-bold text-success text-center" 
                        style="font-size: 1.4rem; line-height: 1.4;">
                    </div>
                </div>
            </div>

            <!-- Right Column: Concept Insights -->
            <div class="col-12 col-xl-7">
                <!-- Dropdown -->
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <div class="fw-semibold col-3">Select Concept</div>
                    <select id="conceptSelectInsights" class="form-select form-select-sm" style="min-width: 280px;">
                        @foreach (var c in Model.Dashboard.Concepts)
                        {
                            <option value="@c.ConceptId">@MapConceptName(c.ConceptId)</option>
                        }
                    </select>
                </div>

                <!-- KPI Tiles -->
                <div class="row g-3 mb-4">
                    <div class="col-12 col-lg-6">
                        <div class="kpi-tile kpi-orange p-3 rounded-3 shadow-sm text-center">
                            <div class="kpi-label small">Avg Attempts</div>
                            <div class="kpi-value fw-bold fs-4" id="conceptAvgAttempts">
                                @Model.Dashboard.Concepts.FirstOrDefault()?.AvgAttempts.ToString("0.00") ?? "0.00"
                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-lg-6">
                        <div class="kpi-tile kpi-green p-3 rounded-3 shadow-sm text-center">
                            <div class="kpi-label small">Avg Time</div>
                            <div class="kpi-value fw-bold fs-4" id="conceptAvgTime">
                                @{
                                    var csecs = Model.Dashboard.Concepts.FirstOrDefault()?.AvgTime ?? 0.0;
                                    var ct = TimeSpan.FromSeconds(csecs);
                                }
                                @($"{(int)ct.TotalMinutes} min {ct.Seconds} sec")
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Trend Chart -->
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <div class="fw-semibold">Trend Over Time</div>
                    <div class="btn-group">
                        <button type="button" class="btn btn-sm btn-primary" id="btnConceptAttempts">Attempts</button>
                        <button type="button" class="btn btn-sm btn-outline-primary" id="btnConceptTime">Time</button>
                    </div>
                </div>
                <div>
                    <canvas id="conceptTrend" style="width:100%; height:350px;"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // ---------- Donut (Progress) ----------
    (function () {
        const donutCanvas = document.getElementById("progressDonut");
        const centerText = document.getElementById("donutCenterText");
        let donutChart = null;

        function drawDonut(progressPct) {
            centerText.textContent = `Progress\n${Math.round(progressPct)}%`;

            if (donutChart) {
                donutChart.data.datasets[0].data = [progressPct, 100 - progressPct];
                donutChart.update();
            } else {
                donutChart = new Chart(donutCanvas, {
                    type: 'doughnut',
                    data: {
                        datasets: [{
                            data: [progressPct, 100 - progressPct],
                            backgroundColor: ['#198754', '#e9ecef'],
                            borderWidth: 0
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        cutout: '72%',
                        plugins: {
                            legend: { display: false },
                            tooltip: { enabled: false }
                        }
                    }
                });
            }
        }

        // Initial draw: "All Concepts"
        const allConcept = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(
            Model.Dashboard.Concepts.FirstOrDefault(c => c.ConceptId == "all") ?? Model.Dashboard.Concepts.First()
        ));
        drawDonut(allConcept.OverallProgress * 100);

        // Update on concept select
        const conceptSel = document.getElementById("conceptSelectInsights");
        const concepts = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Dashboard.Concepts));
        conceptSel.addEventListener("change", function () {
            const selected = concepts.find(c => c.ConceptId === this.value) || concepts[0];
            drawDonut((selected.OverallProgress ?? 0) * 100);
        });
    })();

        // ---------- Concept Insights (Trend) ----------
        (function () {
            const concepts = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(
                Model.Dashboard.Concepts.Select(c => new {
                    c.ConceptId,
                    ConceptName = c.ConceptId switch {
                        "sv" => "Speed and Velocity",
                        "dd" => "Distance and Displacement",
                        "ac" => "Acceleration",
                        _ => c.ConceptName
                    },
                    c.AvgAttempts,
                    c.AvgTime,
                    c.AttemptsTrend,
                    c.TimeTrend
                })
            ));

            let selectedConcept = concepts[0];
            let trendChart = null;

            const conceptSel = document.getElementById("conceptSelectInsights");
            const valAttempts = document.getElementById("conceptAvgAttempts");
            const valTime = document.getElementById("conceptAvgTime");
            const btnA = document.getElementById("btnConceptAttempts");
            const btnT = document.getElementById("btnConceptTime");
            const trendCanvas = document.getElementById("conceptTrend");

            function updateConceptSummary(concept) {
                valAttempts.textContent = (concept.AvgAttempts ?? 0).toFixed(2);
                const secs = Math.round(concept.AvgTime ?? 0);
                const m = Math.floor(secs / 60), s = secs % 60;
                valTime.textContent = `${m} min ${s} sec`;
            }

            function drawTrend(metric) {
                const trendData = metric === "Attempts" ? selectedConcept.AttemptsTrend : selectedConcept.TimeTrend;
                if (!trendData || !trendData.length) {
                    trendCanvas.getContext('2d').clearRect(0, 0, trendCanvas.width, trendCanvas.height);
                    return;
                }
                const labels = trendData.map(pt => pt.Date);
                const data = trendData.map(pt => pt.Value);

                if (trendChart) trendChart.destroy();
                trendChart = new Chart(trendCanvas, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: metric === "Attempts" ? "Avg Attempts" : "Avg Time (sec)",
                            data: data,
                            borderColor: metric === "Attempts" ? "#fd7e14" : "#198754",
                            backgroundColor: "rgba(0,0,0,0)",
                            tension: 0.3,
                            pointRadius: 3
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: { legend: { display: false } },
                        scales: {
                            x: {
                                title: { display: true, text: "Date" },
                                ticks: { autoSkip: true, maxTicksLimit: 6 }
                            },
                            y: { title: { display: true, text: metric === "Attempts" ? "Attempts" : "Seconds" } }
                        }
                    }
                });
            }

            // Init
            updateConceptSummary(selectedConcept);
            drawTrend("Attempts");

            conceptSel.addEventListener("change", function () {
                selectedConcept = concepts.find(c => c.ConceptId === this.value) || concepts[0];
                updateConceptSummary(selectedConcept);
                const metric = btnA.classList.contains("btn-primary") ? "Attempts" : "Time";
                drawTrend(metric);
            });

            btnA.addEventListener("click", function () {
                btnA.classList.add("btn-primary"); btnA.classList.remove("btn-outline-primary");
                btnT.classList.remove("btn-primary"); btnT.classList.add("btn-outline-primary");
                drawTrend("Attempts");
            });

            btnT.addEventListener("click", function () {
                btnT.classList.add("btn-primary"); btnT.classList.remove("btn-outline-primary");
                btnA.classList.remove("btn-primary"); btnA.classList.add("btn-outline-primary");
                drawTrend("Time");
            });
        })();
    </script>
}
