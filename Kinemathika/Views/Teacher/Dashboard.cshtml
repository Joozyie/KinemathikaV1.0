@* Teacher Dashboard: All Class Overview using RDashboardOverviewVm and Chart.js *@
@model TeacherOverviewVm

@{
    ViewData["IsAuthPage"] = true;
    ViewData["Title"] = "Dashboard";
    Layout = "~/Views/Shared/_TeacherLayout.cshtml";

    var pageTitle = string.IsNullOrEmpty(Model.ClassName)
    ? "All Class Overview"
    : $"{Model.ClassName} Overview";

    Func<string, string> MapConceptName = id => id switch
    {
        "all" => "All Concepts",
        "C101" => "Speed and Velocity",
        "C102" => "Distance and Displacement",
        "C103" => "Acceleration",
        _ => id
    };
}

@section PageTitle {
    <div class="fw-bold">@pageTitle</div>
}

@if (!string.IsNullOrEmpty(ViewBag.ClassId))
{
    <form class="mt-3 mb-3" asp-action="ClassReport" asp-controller="Report" method="get">
        <input type="hidden" name="classId" value="@ViewBag.ClassId" />
        <button type="submit" class="btn btn-primary">
            Download Class Report
        </button>
    </form>
}

<!-- ==================== TOP KPI ROW ==================== -->
<div class="row g-3 mb-3">
    @if (string.IsNullOrEmpty(Model.ClassName))
    {
        <div class="col">
            <div class="kpi-tile kpi-blue">
                <div class="kpi-label">Total Classes</div>
                <div class="kpi-value">@Model.Dashboard.TotalClasses</div>
            </div>
        </div>
    }
    <div class="col">
        <div class="kpi-tile kpi-blue">
            <div class="kpi-label">Total Students</div>
            <div class="kpi-value">@Model.Dashboard.TotalStudents</div>
        </div>
    </div>
    <div class="col">
        <div class="kpi-tile kpi-orange">
            <div class="kpi-label">Avg Attempts per Problem</div>
            <div class="kpi-value">@Model.Dashboard.AvgAttemptsPerProblem.ToString("0.00")</div>
        </div>
    </div>
    <div class="col">
        <div class="kpi-tile kpi-green">
            <div class="kpi-label">Avg Time per Problem</div>
            <div class="kpi-value">
                @{
                    var secs = Model.Dashboard.AvgTimePerProblem;
                    var t = TimeSpan.FromSeconds(secs);
                }
                @($"{(int)t.TotalMinutes} min {t.Seconds} sec")
            </div>
        </div>
    </div>
</div>

<!-- ==================== PROGRESS + CONCEPT INSIGHTS CARD ==================== -->
<div class="card border-0 shadow-sm rounded-4 mb-3">
    <div class="card-body">
        <div class="fw-bold fs-5 mb-3">Concept Insights</div>

        <div class="row g-4">
            <div class="col-12 col-xl-5 text-center d-flex flex-column align-items-center">
                <div class="position-relative" style="width: 100%; max-width: 260px; aspect-ratio: 1;">
                    <canvas id="progressDonut"></canvas>
                    <div id="donutCenterText"
                        class="position-absolute top-50 start-50 translate-middle fw-bold text-success text-center"
                        style="font-size: 1.4rem; line-height: 1.4;">
                    </div>
                </div>
            </div>

            <div class="col-12 col-xl-7">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <div class="fw-semibold col-3">Select Concept</div>
                    <select id="conceptSelectInsights" class="form-select form-select-sm" style="min-width: 280px;">
                        @foreach (var c in Model.Dashboard.Concepts ?? [])
                        {
                            <option value="@c.ConceptId">@MapConceptName(c.ConceptId)</option>
                        }
                    </select>
                </div>

                <div class="row g-3 mb-4">
                    <div class="col-12 col-lg-6">
                        <div class="kpi-tile kpi-orange p-3 rounded-3 shadow-sm text-center">
                            <div class="kpi-label small">Avg Attempts</div>
                            <div class="kpi-value fw-bold fs-4" id="conceptAvgAttempts">
                                @(Model.Dashboard.Concepts?.FirstOrDefault()?.AvgAttempts.ToString("0.00") ?? "0.00")
                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-lg-6">
                        <div class="kpi-tile kpi-green p-3 rounded-3 shadow-sm text-center">
                            <div class="kpi-label small">Avg Time</div>
                            <div class="kpi-value fw-bold fs-4" id="conceptAvgTime">
                                @{
                                    var csecs = Model.Dashboard.Concepts?.FirstOrDefault()?.AvgTime ?? 0.0;
                                    var ct = TimeSpan.FromSeconds(csecs);
                                }
                                @($"{(int)ct.TotalMinutes} min {ct.Seconds} sec")
                            </div>
                        </div>
                    </div>
                </div>

                <div class="d-flex justify-content-between align-items-center mb-2">
                    <div class="fw-semibold">Trend Over Time</div>
                    <div class="btn-group">
                        <button type="button" class="btn btn-sm btn-primary" id="btnConceptAttempts">Attempts</button>
                        <button type="button" class="btn btn-sm btn-outline-primary" id="btnConceptTime">Time</button>
                    </div>
                </div>
                <div>
                    <canvas id="conceptTrend" style="width:100%; height:350px;"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- ==================== STUDENT PERFORMANCE TABLE ==================== -->
@if (Model.StudentPerformances != null && Model.StudentPerformances.Any())
{
    <style>
        /* Adjust row height for better readability */
        #studentPerfTable tbody tr {
            height: 48px;
        }

        /* Customize header background and text */
        #studentPerfTable thead {
            background-color: #f8f9fa;
            color: #495057;
        }

        #studentPerfTable_filter {
            margin-bottom: 1.5rem;
        }

        /* Add subtle border and shadow to the table */
        #studentPerfTable {
            margin-bottom: 1.5rem;
            border: 1px solid #dee2e6;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        /* Highlight rows on hover */
        #studentPerfTable tbody tr:hover {
            background-color: #f1f1f1;
        }

        /* Style pagination controls */
        .dataTables_paginate {
            font-size: 0.875rem;
        }

        /* Style search input */
        .dataTables_filter input {
            border-radius: 0.375rem;
            border: 1px solid #ced4da;
            padding: 0.375rem;
        }
    </style>
    <div class="card border-0 shadow-sm rounded-4 mb-3">
        <div class="card-body">
            <div class="fw-bold fs-5">Student Performance</div>

            <table class="table table-hover table-striped" id="studentPerfTable">
                <thead class="table-light">
                    <tr>
                        <th>Student ID</th>
                        <th>Name</th>
                        <th>Progress (%)</th>
                        <th>Avg Attempts</th>
                        <th>Avg Time</th>
                        <th>Last Activity</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var s in Model.StudentPerformances)
                    {
                        <tr onclick="window.location='@Url.Action("Student", "Teacher", new { studentId = s.StudentId })'"
                            style="cursor:pointer;">
                            <td>@s.StudentId</td>
                            <td>@s.Name</td>
                            <td>@Math.Round(s.ProgressPct, 1)</td>
                            <td>@s.AvgAttempts.ToString("0.00")</td>
                            <td>
                                @{
                                    var timeSpan = TimeSpan.FromSeconds(s.AvgTimeSec);
                                }
                                @($"{(int)timeSpan.TotalMinutes} min {timeSpan.Seconds} sec")
                            </td>
                            <td>
                                @(s.LastActivity?.ToString("yyyy-MM-dd HH:mm") ?? "-")
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <link rel="stylesheet" href="https://cdn.datatables.net/1.10.25/css/jquery.dataTables.min.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.datatables.net/1.10.25/js/jquery.dataTables.min.js"></script>
    <script>
        $(document).ready(function () {
            $('#studentPerfTable').DataTable({
                pageLength: 10,
                lengthMenu: [5, 10, 25, 50],
                order: [[2, 'desc']], // default sort by Progress %
                responsive: true, // Enable responsive design
                dom: 'Bfrtip', // Include buttons
                buttons: [
                    'copy', 'csv', 'excel', 'pdf', 'print' // Export options
                ],
                initComplete: function () {
                    // Custom styling for buttons
                    $('.dt-button').addClass('btn btn-outline-primary btn-sm mx-1');
                }
            });
        });
    </script>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        (function () {
            const concepts = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Dashboard.Concepts ?? []));
            if (!concepts.length) return; // exit if empty

            const donutCanvas = document.getElementById("progressDonut");
            const centerText = document.getElementById("donutCenterText");
            let donutChart = null;

            const initialConcept = concepts.find(c => c.ConceptId === "all") || concepts[0];

            function drawDonut(progressPct) {
                centerText.textContent = `Progress\n${Math.round(progressPct)}%`;

                if (donutChart) {
                    donutChart.data.datasets[0].data = [progressPct, 100 - progressPct];
                    donutChart.update();
                } else {
                    donutChart = new Chart(donutCanvas, {
                        type: 'doughnut',
                        data: {
                            datasets: [{
                                data: [progressPct, 100 - progressPct],
                                backgroundColor: ['#198754', '#e9ecef'],
                                borderWidth: 0
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            cutout: '72%',
                            plugins: {
                                legend: { display: false },
                                tooltip: { enabled: false }
                            }
                        }
                    });
                }
            }

            drawDonut((initialConcept.OverallProgress ?? 0) * 100);

            const conceptSel = document.getElementById("conceptSelectInsights");
            conceptSel.addEventListener("change", function () {
                const selected = concepts.find(c => c.ConceptId === this.value) || concepts[0];
                drawDonut((selected.OverallProgress ?? 0) * 100);
            });

            // Trend Chart
            const valAttempts = document.getElementById("conceptAvgAttempts");
            const valTime = document.getElementById("conceptAvgTime");
            const btnA = document.getElementById("btnConceptAttempts");
            const btnT = document.getElementById("btnConceptTime");
            const trendCanvas = document.getElementById("conceptTrend");
            let selectedConcept = initialConcept;
            let trendChart = null;

            function updateConceptSummary(concept) {
                valAttempts.textContent = (concept.AvgAttempts ?? 0).toFixed(2);
                const secs = Math.round(concept.AvgTime ?? 0);
                valTime.textContent = `${Math.floor(secs / 60)} min ${secs % 60} sec`;
            }

            function drawTrend(metric) {
                const trendData = metric === "Attempts" ? selectedConcept.AttemptsTrend : selectedConcept.TimeTrend;
                const ctx = trendCanvas.getContext('2d');
                ctx.clearRect(0, 0, trendCanvas.width, trendCanvas.height);

                if (!trendData?.length) return;

                const labels = trendData.map(pt => pt.Date);
                const data = trendData.map(pt => pt.Value);

                if (trendChart) trendChart.destroy();
                trendChart = new Chart(trendCanvas, {
                    type: 'line',
                    data: {
                        labels,
                        datasets: [{
                            label: metric === "Attempts" ? "Avg Attempts" : "Avg Time (sec)",
                            data,
                            borderColor: metric === "Attempts" ? "#fd7e14" : "#198754",
                            backgroundColor: "rgba(0,0,0,0)",
                            tension: 0.3,
                            pointRadius: 3
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: { legend: { display: false } },
                        scales: {
                            x: { title: { display: true, text: "Date" }, ticks: { autoSkip: true, maxTicksLimit: 6 } },
                            y: { title: { display: true, text: metric === "Attempts" ? "Attempts" : "Seconds" } }
                        }
                    }
                });
            }

            updateConceptSummary(selectedConcept);
            drawTrend("Attempts");

            conceptSel.addEventListener("change", function () {
                selectedConcept = concepts.find(c => c.ConceptId === this.value) || concepts[0];
                updateConceptSummary(selectedConcept);
                const metric = btnA.classList.contains("btn-primary") ? "Attempts" : "Time";
                drawTrend(metric);
            });

            btnA.addEventListener("click", function () {
                btnA.classList.add("btn-primary"); btnA.classList.remove("btn-outline-primary");
                btnT.classList.remove("btn-primary"); btnT.classList.add("btn-outline-primary");
                drawTrend("Attempts");
            });
            btnT.addEventListener("click", function () {
                btnT.classList.add("btn-primary"); btnT.classList.remove("btn-outline-primary");
                btnA.classList.remove("btn-primary"); btnA.classList.add("btn-outline-primary");
                drawTrend("Time");
            });
        })();
    </script>
}
