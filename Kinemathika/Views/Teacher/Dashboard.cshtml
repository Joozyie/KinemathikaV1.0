@* Teacher Dashboard: Overall + Class views, Concept Insights only (no bar chart) *@
@model Kinemathika.ViewModels.Teacher.TeacherDashboardVm
@using Kinemathika.ViewModels.Teacher
@using System.Linq

@{
    ViewData["IsAuthPage"] = true;
    ViewData["Title"] = "Dashboard";
    Layout = "~/Views/Shared/_TeacherLayout.cshtml";

    var pageTitle = Model.IsOverall ? "Overall Overview" : $"Class Overview — {Model.CurrentClassName}";
}

@section PageTitle {
    <div class="fw-semibold">@pageTitle</div>
}
@section PageActions {
    <button class="btn btn-success btn-sm" data-bs-toggle="modal" data-bs-target="#studentAddModal">
        <i class="bi bi-person-plus me-1"></i>Add Student
    </button>
}

<!-- ==================== TOP KPI ROW ==================== -->
@if (Model.IsOverall)
{
    var conceptAttempts = Model.Overview?.ConceptAvgAttempts ?? new List<double>();
    var avgAttempts = conceptAttempts.Any() ? Math.Round(conceptAttempts.Average(), 2) : 0.0;
    var secs = (double)(Model.Overview?.AvgTimeToCorrectSec ?? 0);
    var t = TimeSpan.FromSeconds(secs);
    var timeNice = $"{(int)t.TotalMinutes} min {t.Seconds} sec";
    var firstTryPct = string.Format("{0:P0}", Model.Overview?.FirstTryCorrectRate ?? 0m);

    <div class="row g-3 mb-3">
        <div class="col-12 col-lg-2 col-md-4">
            <div class="kpi-tile kpi-blue">
                <div class="kpi-label">Total Classes</div>
                <div class="kpi-value">@Model.Overview?.TotalClasses</div>
            </div>
        </div>
        <div class="col-12 col-lg-2 col-md-4">
            <div class="kpi-tile kpi-blue">
                <div class="kpi-label">Total Students</div>
                <div class="kpi-value">@Model.Overview?.TotalStudents</div>
            </div>
        </div>
        <div class="col-12 col-lg-3 col-md-4">
            <div class="kpi-tile kpi-orange">
                <div class="kpi-label">Avg Attempts per Problem</div>
                <div class="kpi-value">@avgAttempts</div>
            </div>
        </div>
        <div class="col-12 col-lg-3 col-md-6">
            <div class="kpi-tile kpi-green">
                <div class="kpi-label">Avg Time per Problem</div>
                <div class="kpi-value">@timeNice</div>
            </div>
        </div>
        <div class="col-12 col-lg-2 col-md-6">
            <div class="kpi-tile kpi-blue">
                <div class="kpi-label">First-Try Correct</div>
                <div class="kpi-value">@firstTryPct</div>
            </div>
        </div>
    </div>
}
else
{
    var classStudentsCount = Model.Students?.Count() ?? 0;
    var classConceptAttempts = Model.Overview?.ConceptAvgAttempts ?? new List<double>();
    var classAvgAttempts = classConceptAttempts.Any() ? Math.Round(classConceptAttempts.Average(), 2) : 0.0;
    var csecs = (double)(Model.Overview?.AvgTimeToCorrectSec ?? 0);
    var ct = TimeSpan.FromSeconds(csecs);
    var ctimeNice = $"{(int)ct.TotalMinutes} min {ct.Seconds} sec";

    <div class="row g-3 mb-3">
        <div class="col-12 col-lg-4">
            <div class="kpi-tile kpi-blue">
                <div class="kpi-label">Total Students</div>
                <div class="kpi-value">@classStudentsCount</div>
            </div>
        </div>
        <div class="col-12 col-lg-4">
            <div class="kpi-tile kpi-orange">
                <div class="kpi-label">Avg Attempts per Problem</div>
                <div class="kpi-value">@classAvgAttempts</div>
            </div>
        </div>
        <div class="col-12 col-lg-4">
            <div class="kpi-tile kpi-green">
                <div class="kpi-label">Avg Time per Problem</div>
                <div class="kpi-value">@ctimeNice</div>
            </div>
        </div>
    </div>
}

<!-- ==================== PROGRESS + CONCEPT INSIGHTS (side-by-side) ==================== -->
<div class="card border-0 shadow-sm rounded-4 mb-3">
    <div class="card-body">
        <div class="row g-4 align-items-start">
            <div class="col-12 col-xl-5">
                <div class="fw-semibold mb-2">@((Model.IsOverall) ? "Overall Mastery" : "Class Progress")</div>
                <div id="progressDonut"
                     data-completed="@((int)Math.Round(((Model.Overview?.MasteryRate ?? 0m) * 100)))"
                     style="min-height:280px;"></div>
            </div>

            <div class="col-12 col-xl-7">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <div class="fw-semibold">Concept Insights</div>
                    <select id="conceptSelectInsights" class="form-select form-select-sm" style="min-width:280px;">
                        <option value="dd">Distance & Displacement</option>
                        <option value="sv">Speed & Velocity</option>
                        <option value="acc">Acceleration</option>
                    </select>
                </div>

                <div class="row g-3 mb-3">
                    <div class="col-12 col-lg-6">
                        <div class="kpi-tile kpi-orange">
                            <div class="kpi-label">Avg Attempts (concept)</div>
                            <div class="kpi-value" id="conceptAvgAttempts">0.00</div>
                        </div>
                    </div>
                    <div class="col-12 col-lg-6">
                        <div class="kpi-tile kpi-green">
                            <div class="kpi-label">Avg Time (concept)</div>
                            <div class="kpi-value" id="conceptAvgTime">0 min 0 sec</div>
                        </div>
                    </div>
                </div>

                <div class="d-flex justify-content-between align-items-center">
                    <div class="fw-semibold">Trend Over Time</div>
                    <div class="btn-group mb-2">
                        <button type="button" class="btn btn-sm btn-primary" id="btnConceptAttempts">Attempts</button>
                        <button type="button" class="btn btn-sm btn-outline-primary" id="btnConceptTime">Time</button>
                    </div>
                </div>
                <div id="conceptTrend" style="min-height:300px;"></div>
            </div>
        </div>
    </div>
</div>

<!-- ==================== STUDENTS / REPORTS ==================== -->
<div class="card border-0 shadow-sm rounded-4 mb-3">
    <div class="card-body">
        <ul class="nav nav-tabs mb-3">
            <li class="nav-item"><a class="nav-link active" data-bs-toggle="tab" href="#tab-students">Students</a></li>
            <li class="nav-item"><a class="nav-link" data-bs-toggle="tab" href="#tab-reports">Reports</a></li>
        </ul>

        <div class="tab-content">
            <div class="tab-pane fade show active" id="tab-students">
                @if (Model.IsOverall)
                {
                    <ul class="nav nav-pills mb-3" id="students-class-tabs" role="tablist">
                        @{
                            var idx = 0;
                        }
                        @foreach (var t in Model.StudentTabs)
                        {
                            var active = idx == 0 ? "active" : "";
                            <li class="nav-item" role="presentation">
                                <button class="nav-link @active"
                                        id="tab-@t.ClassId"
                                        data-bs-toggle="tab"
                                        data-bs-target="#pane-@t.ClassId"
                                        type="button" role="tab"
                                        aria-controls="pane-@t.ClassId"
                                        aria-selected="@(idx == 0 ? "true" : "false")">
                                    @t.ClassName
                                </button>
                            </li>
                            idx++;
                        }
                    </ul>

                    <div class="tab-content">
                        @{
                            var paneIdx = 0;
                        }
                        @foreach (var t in Model.StudentTabs)
                        {
                            var show = paneIdx == 0 ? "show active" : "";
                            <div class="tab-pane fade @show" id="pane-@t.ClassId" role="tabpanel" aria-labelledby="tab-@t.ClassId">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <div class="fw-semibold">Students in @t.ClassName</div>
                                    <div class="input-group" style="max-width: 280px;">
                                        <span class="input-group-text"><i class="bi bi-search"></i></span>
                                        <input class="form-control js-student-search" placeholder="Search students"
                                               data-target="#table-@t.ClassId" />
                                    </div>
                                </div>

                                @if (t.Students?.Any() == true)
                                {
                                    <div class="table-responsive student-scroll" style="max-height: 420px;">
                                        <table class="table table-sm align-middle mb-0" id="table-@t.ClassId">
                                            <thead>
                                                <tr class="table-success">
                                                    <th>Name</th>
                                                    <th class="d-none d-md-table-cell">Email</th>
                                                    <th class="text-center">Attempts</th>
                                                    <th class="text-center">Avg Accuracy</th>
                                                    <th class="d-none d-md-table-cell">Last Active</th>
                                                    <th class="text-end">Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var s in t.Students)
                                                {
                                                    <tr>
                                                        <td>
                                                            <a asp-action="Student" asp-route-studentId="@s.StudentId" class="text-decoration-none">
                                                                @s.Name
                                                            </a>
                                                        </td>
                                                        <td class="d-none d-md-table-cell">@s.Email</td>
                                                        <td class="text-center">@s.TotalAttempts</td>
                                                        <td class="text-center">@string.Format("{0:P0}", s.AvgAccuracy)</td>
                                                        <td class="d-none d-md-table-cell">@((s.LastActive?.ToString("dd/MM/yyyy h:mm tt")) ?? "-")</td>
                                                        <td class="text-end">
                                                            <button class="btn btn-link p-0" data-bs-toggle="dropdown" aria-expanded="false">
                                                                <i class="bi bi-three-dots-vertical"></i>
                                                            </button>
                                                            <ul class="dropdown-menu dropdown-menu-end">
                                                                <li>
                                                                    <button class="dropdown-item text-secondary" data-bs-toggle="modal" data-bs-target="#studentEditModal"
                                                                            data-sid="@s.StudentId" data-name="@s.Name" data-email="@s.Email"
                                                                            data-class="@t.ClassId">
                                                                        Edit
                                                                    </button>
                                                                </li>
                                                                <li><hr class="dropdown-divider"></li>
                                                                <li>
                                                                    <button class="dropdown-item text-danger" data-bs-toggle="modal" data-bs-target="#studentDeleteModal"
                                                                            data-sid="@s.StudentId" data-class="@t.ClassId">
                                                                        Delete
                                                                    </button>
                                                                </li>
                                                            </ul>
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                }
                                else
                                {
                                    <div class="alert alert-light border mb-0">No students in this class.</div>
                                }
                            </div>
                            paneIdx++;
                        }
                    </div>
                }
                else
                {
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <div class="fw-semibold">Students in @Model.CurrentClassName</div>
                        <div class="input-group" style="max-width: 280px;">
                            <span class="input-group-text"><i class="bi bi-search"></i></span>
                            <input class="form-control js-student-search" placeholder="Search students"
                                   data-target="#table-class" />
                        </div>
                    </div>

                    <div class="table-responsive student-scroll" style="max-height: 420px;">
                        <table class="table table-sm align-middle mb-0" id="table-class">
                            <thead>
                                <tr class="table-success">
                                    <th>Name</th>
                                    <th class="d-none d-md-table-cell">Email</th>
                                    <th class="text-center">Attempts</th>
                                    <th class="text-center">Avg Accuracy</th>
                                    <th class="d-none d-md-table-cell">Last Active</th>
                                    <th class="text-end">Actions</th>
                                </tr>
                            </thead>
                            @{
                                var classStudentsList = Model.Students
                                ?? Enumerable.Empty<Kinemathika.ViewModels.Teacher.StudentRowVm>();
                            }
                            <tbody>
                                @foreach (var s in classStudentsList)
                                {
                                    <tr>
                                        <td>
                                            <a asp-action="Student" asp-route-studentId="@s.StudentId" class="text-decoration-none">
                                                @s.Name
                                            </a>
                                        </td>
                                        <td class="d-none d-md-table-cell">@s.Email</td>
                                        <td class="text-center">@s.TotalAttempts</td>
                                        <td class="text-center">@string.Format("{0:P0}", s.AvgAccuracy)</td>
                                        <td class="d-none d-md-table-cell">@((s.LastActive?.ToString("dd/MM/yyyy h:mm tt")) ?? "-")</td>
                                        <td class="text-end">
                                            <button class="btn btn-link p-0" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-three-dots-vertical"></i>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end">
                                                <li>
                                                    <button class="dropdown-item text-secondary" data-bs-toggle="modal" data-bs-target="#studentEditModal"
                                                            data-sid="@s.StudentId" data-name="@s.Name" data-email="@s.Email"
                                                            data-class="@Model.CurrentClassId">
                                                        Edit
                                                    </button>
                                                </li>
                                                <li><hr class="dropdown-divider" /></li>
                                                <li>
                                                    <button class="dropdown-item text-danger" data-bs-toggle="modal" data-bs-target="#studentDeleteModal"
                                                            data-sid="@s.StudentId" data-class="@Model.CurrentClassId">
                                                        Delete
                                                    </button>
                                                </li>
                                            </ul>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>

            <div class="tab-pane fade" id="tab-reports">
                <div class="fw-semibold mb-2">Overall Statistics</div>
                <div class="d-flex align-items-end gap-3" style="height:220px;">
                    @for (int i = 0; i < Model.Report.Bars.Count; i++)
                    {
                        var h = Model.Report.Bars[i];
                        <div class="text-center">
                            <div style="width:48px; height:@($"{h}%"); background:#198754; border-radius:.5rem .5rem 0 0;"></div>
                            <div class="small mt-1 text-muted" style="width:60px;">@Model.Report.Labels[i]</div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- ==================== RECENT ATTEMPTS ==================== -->
@{
    var recentAttempts = Model.Overview?.RecentAttempts
        ?? new List<Kinemathika.ViewModels.Teacher.RecentAttemptRow>();
}
@if (recentAttempts.Any())
{
    <div class="card border-0 shadow-sm rounded-4 mb-3">
        <div class="card-body">
            <div class="fw-semibold mb-2">
                Recent Attempts (@(Model.IsOverall ? "All Classes" : Model.CurrentClassName))
            </div>
            <div class="table-responsive">
                <table class="table align-middle mb-0">
                    <thead class="table-success">
                        <tr>
                            <th>Ended</th>
                            <th>Student</th>
                            <th>Concept</th>
                            <th>Problem</th>
                            <th>Status</th>
                            <th>First Try</th>
                            <th>Attempts</th>
                            <th>Time (s)</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var r in recentAttempts)
                        {
                            <tr>
                                <td>@r.EndedAt.ToLocalTime()</td>
                                <td>@r.StudentId</td>
                                <td>@r.ConceptId</td>
                                <td>@r.ProblemId</td>
                                <td>@r.Status</td>
                                <td>@(r.FirstTry ? "Yes" : "No")</td>
                                <td>@r.Attempts</td>
                                <td>@r.TimeSec</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}
else
{
    <div class="alert alert-light border mb-3">No recent attempts.</div>
}

<!-- ==================== ADD / EDIT / DELETE STUDENT MODALS ==================== -->
<form method="post" asp-action="CreateStudent">
    @Html.AntiForgeryToken()
    <input type="hidden" name="classId" value="@Model.CurrentClassId" />
    <div class="modal fade" id="studentAddModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content rounded-4">
                <div class="modal-header">
                    <h5 class="modal-title">Add Student</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Name</label>
                        <input name="name" class="form-control" required />
                    </div>
                    <div class="mb-1">
                        <label class="form-label">Email</label>
                        <input name="email" type="email" class="form-control" required />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-success">Add</button>
                </div>
            </div>
        </div>
    </div>
</form>

<form method="post" asp-action="EditStudent">
    @Html.AntiForgeryToken()
    <input type="hidden" name="classId" value="@Model.CurrentClassId" />
    <input type="hidden" name="id" id="editSid" />
    <div class="modal fade" id="studentEditModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content rounded-4">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Student</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Name</label>
                        <input name="name" id="editName" class="form-control" required />
                    </div>
                    <div class="mb-1">
                        <label class="form-label">Email</label>
                        <input name="email" id="editEmail" type="email" class="form-control" required />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-success">Save</button>
                </div>
            </div>
        </div>
    </div>
</form>

<form method="post" asp-action="DeleteStudent">
    @Html.AntiForgeryToken()
    <input type="hidden" name="classId" value="@Model.CurrentClassId" />
    <input type="hidden" name="id" id="delSid" />
    <div class="modal fade" id="studentDeleteModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content rounded-4">
                <div class="modal-header">
                    <h5 class="modal-title text-danger">Delete Student</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    Remove <strong id="delName">this student</strong>?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-outline-danger">Delete</button>
                </div>
            </div>
        </div>
    </div>
</form>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/d3@7"></script>
    <script>
        // ---------- Table search + modal prefill ----------
        (function () {
            function filterTable(input) {
                const sel = input.getAttribute('data-target');
                const table = document.querySelector(sel);
                if (!table) return;
                const q = (input.value || '').trim().toLowerCase();
                table.querySelectorAll('tbody tr').forEach(tr => {
                    const text = tr.innerText.toLowerCase();
                    tr.style.display = text.indexOf(q) >= 0 ? '' : 'none';
                });
            }
            document.querySelectorAll('.js-student-search').forEach(inp => {
                inp.addEventListener('input', () => filterTable(inp));
            });

            const editModal = document.getElementById('studentEditModal');
            editModal?.addEventListener('show.bs.modal', e => {
                const btn = e.relatedTarget;
                document.getElementById('editSid').value = btn.getAttribute('data-sid') || '';
                document.getElementById('editName').value = btn.getAttribute('data-name') || '';
                document.getElementById('editEmail').value = btn.getAttribute('data-email') || '';
            });

            const delModal = document.getElementById('studentDeleteModal');
            delModal?.addEventListener('show.bs.modal', e => {
                const btn = e.relatedTarget;
                const sid = btn.getAttribute('data-sid') || '';
                document.getElementById('delSid').value = sid;
                document.getElementById('delName').textContent = sid || 'this student';
            });
        })();

        // ---------- D3 helpers ----------
        const D3Base = (() => {
            function makeSvg(sel, w=820, h=320, m={top:20,right:20,bottom:30,left:44}) {
                const root = d3.select(sel); root.selectAll("*").remove();
                const svg = root.append("svg").attr("width", w).attr("height", h);
                const g = svg.append("g").attr("transform", `translate(${m.left},${m.top})`);
                return { svg, g, w: w - m.left - m.right, h: h - m.top - m.bottom };
            }
            const parseDate = d => (d instanceof Date) ? d : new Date(d);
            return { makeSvg, parseDate };
        })();

        function LineChart(sel, series) {
            const { g, w, h } = D3Base.makeSvg(sel);
            const data = (series?.points || []).map(p => ({ x: D3Base.parseDate(p.x), y: +p.y }));

            // Axes setup even if empty
            const xDomain = data.length ? d3.extent(data, d => d.x) : [new Date(Date.now()-14*864e5), new Date()];
            const yMax = data.length ? d3.max(data, d => d.y) : 1;
            const x = d3.scaleTime().range([0, w]).domain(xDomain);
            const y = d3.scaleLinear().range([h, 0]).domain([0, yMax]).nice();

            g.append("g").attr("transform", `translate(0,${h})`).call(d3.axisBottom(x));
            g.append("g").call(d3.axisLeft(y));

            if (!data.length) {
                g.append("text")
                    .attr("x", w/2).attr("y", h/2)
                    .attr("text-anchor", "middle")
                    .attr("fill", "#6c757d")
                    .text("No data");
                return;
            }

            const line = d3.line().x(d => x(d.x)).y(d => y(d.y));
            g.append("path")
              .datum(data)
              .attr("fill", "none")
              .attr("stroke", "#0d6efd")
              .attr("stroke-width", 2)
              .attr("d", line);

            g.selectAll("circle")
              .data(data).enter().append("circle")
              .attr("r", 3)
              .attr("fill", "#0d6efd")
              .attr("cx", d => x(d.x))
              .attr("cy", d => y(d.y));
        }

        function DonutProgress(sel, completed, total) {
            const size = 240, thick = 30;
            const root = D3Base.makeSvg(sel, size, size, {top:0,right:0,bottom:0,left:0});
            const g = root.svg.append("g").attr("transform", `translate(${size/2},${size/2})`);
            const pct = total > 0 ? Math.max(0, Math.min(1, completed / total)) : 0;
            const arc = d3.arc().innerRadius((size/2)-thick).outerRadius(size/2).startAngle(0);

            g.append("path").datum({endAngle: 2*Math.PI}).attr("fill", "#e9ecef").attr("d", arc);
            g.append("path").datum({endAngle: 2*Math.PI*pct}).attr("fill", "#198754").attr("d", arc);
            g.append("text").attr("text-anchor","middle").attr("dy","0.35em").text(`${(pct*100).toFixed(1)}%`);
        }

        // ---------- Donut ----------
        (function(){
            const donut = document.getElementById("progressDonut");
            if (donut) DonutProgress("#progressDonut", +donut.dataset.completed || 0, 100);
        })();

        // ---------- Concept Insights (summary + trend) ----------
        (function(){
            const isOverall  = @Model.IsOverall.ToString().ToLower();
            const classId    = "@(Model.CurrentClassId ?? 0)";
            const conceptSel = document.getElementById("conceptSelectInsights");
            const btnA       = document.getElementById("btnConceptAttempts");
            const btnT       = document.getElementById("btnConceptTime");
            const valAttempts= document.getElementById("conceptAvgAttempts");
            const valTime    = document.getElementById("conceptAvgTime");

            async function loadConceptSummary() {
                const conceptId = conceptSel.value;
                const url = isOverall
                    ? `/api/analytics/overview/concept-summary?conceptId=${encodeURIComponent(conceptId)}`
                    : `/api/analytics/class/${classId}/concept-summary?conceptId=${encodeURIComponent(conceptId)}`;
                const r = await fetch(url);
                const d = await r.json();
                valAttempts.textContent = (d.avgAttempts ?? 0).toFixed(2);
                const secs = Math.round(d.avgTimeSec ?? 0);
                const m = Math.floor(secs / 60), s = secs % 60;
                valTime.textContent = `${m} min ${s} sec`;
            }

            async function drawTrend(metric) {
                const conceptId = conceptSel.value;
                const url = isOverall
                    ? `/api/analytics/overview/trend?metric=${encodeURIComponent(metric)}&conceptId=${encodeURIComponent(conceptId)}`
                    : `/api/analytics/class/${classId}/trend?metric=${encodeURIComponent(metric)}&conceptId=${encodeURIComponent(conceptId)}`;
                const r = await fetch(url);
                const series = await r.json();
                LineChart("#conceptTrend", series);
            }

            // init
            loadConceptSummary();
            drawTrend("Attempts");

            // events
            conceptSel.addEventListener("change", () => {
                loadConceptSummary();
                const metric = btnA.classList.contains("btn-primary") ? "Attempts" : "Time";
                drawTrend(metric);
            });
            btnA.addEventListener("click", () => {
                btnA.classList.add("btn-primary"); btnA.classList.remove("btn-outline-primary");
                btnT.classList.remove("btn-primary"); btnT.classList.add("btn-outline-primary");
                drawTrend("Attempts");
            });
            btnT.addEventListener("click", () => {
                btnT.classList.add("btn-primary"); btnT.classList.remove("btn-outline-primary");
                btnA.classList.remove("btn-primary"); btnA.classList.add("btn-outline-primary");
                drawTrend("Time");
            });
        })();
    </script>
}
