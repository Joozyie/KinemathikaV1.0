// <auto-generated />
using System;
using Kinemathika.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Kinemathika.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250814063010_Baseline")]
    partial class Baseline
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Kinemathika.Models.Analytics.AttemptRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("StudentDbId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("attempts_to_correct")
                        .HasColumnType("int");

                    b.Property<string>("concept_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ended_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("ended_status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("first_attempt_correct")
                        .HasColumnType("bit");

                    b.Property<float>("level_attempt_accuracy")
                        .HasColumnType("real");

                    b.Property<bool>("mastery_valid")
                        .HasColumnType("bit");

                    b.Property<string>("problem_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("session_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("started_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("student_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("time_to_correct_ms")
                        .HasColumnType("int");

                    b.Property<string>("worksheet_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("concept_id");

                    b.HasIndex("ended_at");

                    b.ToTable("AttemptRecords");
                });

            modelBuilder.Entity("Kinemathika.Models.Classroom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Classrooms");
                });

            modelBuilder.Entity("Kinemathika.Models.Enrollment", b =>
                {
                    b.Property<int>("ClassroomId")
                        .HasColumnType("int");

                    b.Property<int>("StudentDbId")
                        .HasColumnType("int");

                    b.HasKey("ClassroomId", "StudentDbId");

                    b.HasIndex("StudentDbId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("Kinemathika.Models.Problem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ProblemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WorksheetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProblemId")
                        .IsUnique();

                    b.HasIndex("WorksheetId");

                    b.ToTable("Problems");
                });

            modelBuilder.Entity("Kinemathika.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Kinemathika.Models.Worksheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConceptId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorksheetId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ConceptId", "WorksheetId")
                        .IsUnique();

                    b.ToTable("Worksheets");
                });

            modelBuilder.Entity("Kinemathika.Models.Analytics.AttemptRecord", b =>
                {
                    b.HasOne("Kinemathika.Models.Student", "Student")
                        .WithMany("Attempts")
                        .HasForeignKey("StudentId");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Kinemathika.Models.Enrollment", b =>
                {
                    b.HasOne("Kinemathika.Models.Classroom", "Classroom")
                        .WithMany("Enrollments")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kinemathika.Models.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentDbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Kinemathika.Models.Problem", b =>
                {
                    b.HasOne("Kinemathika.Models.Worksheet", "Worksheet")
                        .WithMany("Problems")
                        .HasForeignKey("WorksheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Worksheet");
                });

            modelBuilder.Entity("Kinemathika.Models.Classroom", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("Kinemathika.Models.Student", b =>
                {
                    b.Navigation("Attempts");

                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("Kinemathika.Models.Worksheet", b =>
                {
                    b.Navigation("Problems");
                });
#pragma warning restore 612, 618
        }
    }
}
